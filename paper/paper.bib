@Article{Cock2010Sanger,
  Title                    = {The {Sanger} {FASTQ} file format for sequences with quality scores, and the {Solexa}/{Illumina} {FASTQ} variants},
  Author                   = {Peter J A Cock and Christopher J Fields and Naohisa Goto and Michael L Heuer and Peter M Rice},
  Journal                  = {Nucleic Acids Research},
  Year                     = {2010},

  Month                    = apr,
  Number                   = {6},
  Pages                    = {1767--1771},
  Volume                   = {38},

  Abstract                 = {FASTQ has emerged as a common file format for sharing sequencing read data combining both the sequence and an associated per base quality score, despite lacking any formal definition to date, and existing in at least three incompatible variants. This article defines the FASTQ format, covering the original Sanger standard, the Solexa/Illumina variants and conversion between them, based on publicly available information such as the MAQ documentation and conventions recently agreed by the Open Bioinformatics Foundation projects Biopython, BioPerl, BioRuby, BioJava and EMBOSS. Being an open access publication, it is hoped that this description, with the example files provided as Supplementary Data, will serve in future as a reference for this important file format.},
  Doi                      = {10.1093/nar/gkp1137},
  File                     = {Cock2010Sanger.pdf:Cock2010Sanger.pdf:PDF},
  Institution              = {Plant Pathology, SCRI, Invergowrie, Dundee DD2 5DA, UK. peter.cock@scri.ac.uk},
  Keywords                 = {Computational Biology, history; History, 20th Century; History, 21st Century; Sequence Analysis, DNA, history/standards; Software printed},
  Language                 = {eng},
  Medline-pst              = {ppublish},
  Pii                      = {gkp1137},
  Pmid                     = {20015970},
  Url                      = {http://dx.doi.org/10.1093/nar/gkp1137}
}
@Article{Martin2011Cutadapt,
  Title                    = {Cutadapt removes adapter sequences from high-throughput sequencing reads},
  Author                   = {Marcel Martin},
  Journal                  = {EMBnet.journal},
  Year                     = {2011},
  Number                   = {1},
  Pages                    = {10--12},
  Volume                   = {17},

  Abstract                 = {When small RNA is sequenced on current sequencing machines, the resulting reads are usually longer than the RNA and therefore contain parts of the 3' adapter. That adapter must be found and removed error-tolerantly from each read before read mapping. Previous solutions are either hard to use or do not offer required features, in particular support for color space data. As an easy to use alternative, we developed the command-line tool cutadapt, which supports 454, Illumina and SOLiD (color space) data, offers two adapter trimming algorithms, and has other useful features. Cutadapt, including its MIT-licensed source code, is available for download at http://code.google.com/p/cutadapt/},
  Doi                      = {http://dx.doi.org/10.14806/ej.17.1.200},
  File                     = {Martin2011Cutadapt.pdf:Martin2011Cutadapt.pdf:PDF},
  Keywords                 = {Sequencing; Small RNA; MicroRNA; Adapter removal; own},
  Url                      = {http://journal.embnet.org/index.php/embnetjournal/article/view/200}
}
@Article{Cock2009Biopython,
  author   = {Cock, Peter J. A. and Antao, Tiago and Chang, Jeffrey T. and Chapman, Brad A. and Cox, Cymon J. and Dalke, Andrew and Friedberg, Iddo and Hamelryck, Thomas and Kauff, Frank and Wilczynski, Bartek and de Hoon, Michiel J. L.},
  journal  = {Bioinformatics},
  title    = {Biopython: freely available {Python} tools for computational molecular biology and bioinformatics},
  year     = {2009},
  issn     = {1367-4803},
  month    = {03},
  number   = {11},
  pages    = {1422-1423},
  volume   = {25},
  abstract = {{Summary: The Biopython project is a mature open source international collaboration of volunteer developers, providing Python libraries for a wide range of bioinformatics problems. Biopython includes modules for reading and writing different sequence file formats and multiple sequence alignments, dealing with 3D macro molecular structures, interacting with common tools such as BLAST, ClustalW and EMBOSS, accessing key online databases, as well as providing numerical methods for statistical learning.Availability: Biopython is freely available, with documentation and source code at www.biopython.org under the Biopython license.Contact: All queries should be directed to the Biopython mailing lists, see www.biopython.org/wiki/\_Mailing\_listspeter.cock@scri.ac.uk.}},
  doi      = {10.1093/bioinformatics/btp163},
  eprint   = {https://academic.oup.com/bioinformatics/article-pdf/25/11/1422/944180/btp163.pdf},
  url      = {https://doi.org/10.1093/bioinformatics/btp163},
}
@Article{Chen2018Fastp,
  author   = {Chen, Shifu and Zhou, Yanqing and Chen, Yaru and Gu, Jia},
  journal  = {Bioinformatics},
  title    = {{fastp}: an ultra-fast all-in-one {FASTQ} preprocessor},
  year     = {2018},
  issn     = {1367-4803},
  month    = {09},
  number   = {17},
  pages    = {i884-i890},
  volume   = {34},
  abstract = {{Quality control and preprocessing of FASTQ files are essential to providing clean data for downstream analysis. Traditionally, a different tool is used for each operation, such as quality control, adapter trimming and quality filtering. These tools are often insufficiently fast as most are developed using high-level programming languages (e.g. Python and Java) and provide limited multi-threading support. Reading and loading data multiple times also renders preprocessing slow and I/O inefficient.We developed fastp as an ultra-fast FASTQ preprocessor with useful quality control and data-filtering features. It can perform quality control, adapter trimming, quality filtering, per-read quality pruning and many other operations with a single scan of the FASTQ data. This tool is developed in C++ and has multi-threading support. Based on our evaluation, fastp is 2â€“5 times faster than other FASTQ preprocessing tools such as Trimmomatic or Cutadapt despite performing far more operations than similar tools.The open-source code and corresponding instructions are available at https://github.com/OpenGene/fastp.}},
  doi      = {10.1093/bioinformatics/bty560},
  eprint   = {https://academic.oup.com/bioinformatics/article-pdf/34/17/i884/25702346/bty560.pdf},
  url      = {https://doi.org/10.1093/bioinformatics/bty560},
}
@Article{Bonfield2021HTSlib,
  author   = {Bonfield, James K and Marshall, John and Danecek, Petr and Li, Heng and Ohan, Valeriu and Whitwham, Andrew and Keane, Thomas and Davies, Robert M},
  journal  = {GigaScience},
  title    = {{HTSlib}: {C} library for reading/writing high-throughput sequencing data},
  year     = {2021},
  issn     = {2047-217X},
  month    = {02},
  note     = {giab007},
  number   = {2},
  volume   = {10},
  abstract = {{Since the original publication of the VCF and SAM formats, an explosion of software tools have been created to process these data files. To facilitate this a library was produced out of the original SAMtools implementation, with a focus on performance and robustness. The file formats themselves have become international standards under the jurisdiction of the Global Alliance for Genomics and Health.We present a software library for providing programmatic access to sequencing alignment and variant formats. It was born out of the widely used SAMtools and BCFtools applications. Considerable improvements have been made to the original code plus many new features including newer access protocols, the addition of the CRAM file format, better indexing and iterators, and better use of threading.Since the original Samtools release, performance has been considerably improved, with a BAM read-write loop running 5 times faster and BAM to SAM conversion 13 times faster (both using 16 threads, compared to Samtools 0.1.19). Widespread adoption has seen HTSlib downloaded \\&gt;1 million times from GitHub and conda. The C library has been used directly by an estimated 900 GitHub projects and has been incorporated into Perl, Python, Rust, and R, significantly expanding the number of uses via other languages. HTSlib is open source and is freely available from htslib.org under MIT/BSD license.}},
  doi      = {10.1093/gigascience/giab007},
  eprint   = {https://academic.oup.com/gigascience/article-pdf/10/2/giab007/36332285/giab007.pdf},
  url      = {https://doi.org/10.1093/gigascience/giab007},
}
@Article{Du2020Pyfastx,
  author   = {Du, Lianming and Liu, Qin and Fan, Zhenxin and Tang, Jie and Zhang, Xiuyue and Price, Megan and Yue, Bisong and Zhao, Kelei},
  journal  = {Briefings in Bioinformatics},
  title    = {Pyfastx: a robust {Python} package for fast random access to sequences from plain and gzipped {FASTA/Q} files},
  year     = {2020},
  issn     = {1477-4054},
  month    = {12},
  note     = {bbaa368},
  number   = {4},
  volume   = {22},
  abstract = {{FASTA and FASTQ are the most widely used biological data formats that have become the de facto standard to exchange sequence data between bioinformatics tools. With the avalanche of next-generation sequencing data, the amount of sequence data being deposited and accessed in FASTA/Q formats is increasing dramatically. However, the existing tools have very low efficiency at random retrieval of subsequences due to the requirement of loading the entire index into memory. In addition, most existing tools have no capability to build index for large FASTA/Q files because of the limited memory. Furthermore, the tools do not provide support to randomly accessing sequences from FASTA/Q files compressed by gzip, which is extensively adopted by most public databases to compress data for saving storage. In this study, we developed pyfastx as a versatile Python package with commonly used command-line tools to overcome the above limitations. Compared to other tools, pyfastx yielded the highest performance in terms of building index and random access to sequences, particularly when dealing with large FASTA/Q files with hundreds of millions of sequences. A key advantage of pyfastx over other tools is that it offers an efficient way to randomly extract subsequences directly from gzip compressed FASTA/Q files without needing to uncompress beforehand. Pyfastx can easily be installed from PyPI (https://pypi.org/project/pyfastx) and the source code is freely available at https://github.com/lmdu/pyfastx.}},
  doi      = {10.1093/bib/bbaa368},
  eprint   = {https://academic.oup.com/bib/article-pdf/22/4/bbaa368/39136609/bbaa368.pdf},
  url      = {https://doi.org/10.1093/bib/bbaa368},
}
@Misc{scikit-bio,
  author  = {The scikit-bio development team},
  title   = {{scikit-bio}: A Bioinformatics Library for Data Scientists, Students, and Developers},
  url     = {http://scikit-bio.org/},
  version = {0.5.7},
  year    = 2022,
}
@Misc{pysam,
  author  = {Heger, Andreas and Jacobs, Kevin and contributors},
  title   = {{pysam}: {htslib} interface for {Python}},
  url     = {https://github.com/pysam-developers/pysam/},
  version = {0.19.1},
  year    = 2022,
}
@Misc{fastq-and-furious,
  author  = {Laurent Gautier},
  title   = {{fastq-and-furious}},
  url     = {https://lgautier.github.io/fastq-and-furious/},
  version = {0.3.2},
  year    = 2022,
}
@Article{Behnel2011Cython,
  author  = {Stefan Behnel and Robert Bradshaw and Craig Citro and Lisandro Dalcin and Dag Sverre Seljebotn and Kurt Smith},
  journal = {Computing in Science and Engineering},
  title   = {{Cython}: The Best of Both Worlds},
  year    = {2011},
  pages   = {31-39},
  volume  = {13.2},
  doi     = {10.1109/mcse.2010.118},
  url     = {http://www.computer.org/portal/web/csdl/doi/10.1109/MCSE.2010.118},
}
@Misc{isa-l,
  author  = {Roy Oursler and Greg Tucker},
  title   = {Intelligent Storage Acceleration Library},
  year    = 2022,
  publisher = {GitHub},
  journal  = {GitHub repository},
  url     = {https://github.com/intel/isa-l/},
}
